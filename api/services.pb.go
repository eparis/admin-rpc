// Code generated by protoc-gen-go. DO NOT EDIT.
// source: api/services.proto

/*
Package admin is a generated protocol buffer package.

It is generated from these files:
	api/services.proto

It has these top-level messages:
	ExecRequest
	ExecReply
*/
package admin

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "google.golang.org/genproto/googleapis/api/annotations"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// Request message
type ExecRequest struct {
	CmdName string   `protobuf:"bytes,1,opt,name=cmdName" json:"cmdName,omitempty"`
	CmdArgs []string `protobuf:"bytes,2,rep,name=cmdArgs" json:"cmdArgs,omitempty"`
}

func (m *ExecRequest) Reset()                    { *m = ExecRequest{} }
func (m *ExecRequest) String() string            { return proto.CompactTextString(m) }
func (*ExecRequest) ProtoMessage()               {}
func (*ExecRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *ExecRequest) GetCmdName() string {
	if m != nil {
		return m.CmdName
	}
	return ""
}

func (m *ExecRequest) GetCmdArgs() []string {
	if m != nil {
		return m.CmdArgs
	}
	return nil
}

// Response message
type ExecReply struct {
	Output []byte `protobuf:"bytes,1,opt,name=output,proto3" json:"output,omitempty"`
}

func (m *ExecReply) Reset()                    { *m = ExecReply{} }
func (m *ExecReply) String() string            { return proto.CompactTextString(m) }
func (*ExecReply) ProtoMessage()               {}
func (*ExecReply) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *ExecReply) GetOutput() []byte {
	if m != nil {
		return m.Output
	}
	return nil
}

func init() {
	proto.RegisterType((*ExecRequest)(nil), "admin.ExecRequest")
	proto.RegisterType((*ExecReply)(nil), "admin.ExecReply")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Exec service

type ExecClient interface {
	// Send a single command to be executed
	SendExec(ctx context.Context, in *ExecRequest, opts ...grpc.CallOption) (Exec_SendExecClient, error)
}

type execClient struct {
	cc *grpc.ClientConn
}

func NewExecClient(cc *grpc.ClientConn) ExecClient {
	return &execClient{cc}
}

func (c *execClient) SendExec(ctx context.Context, in *ExecRequest, opts ...grpc.CallOption) (Exec_SendExecClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_Exec_serviceDesc.Streams[0], c.cc, "/admin.Exec/SendExec", opts...)
	if err != nil {
		return nil, err
	}
	x := &execSendExecClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Exec_SendExecClient interface {
	Recv() (*ExecReply, error)
	grpc.ClientStream
}

type execSendExecClient struct {
	grpc.ClientStream
}

func (x *execSendExecClient) Recv() (*ExecReply, error) {
	m := new(ExecReply)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Server API for Exec service

type ExecServer interface {
	// Send a single command to be executed
	SendExec(*ExecRequest, Exec_SendExecServer) error
}

func RegisterExecServer(s *grpc.Server, srv ExecServer) {
	s.RegisterService(&_Exec_serviceDesc, srv)
}

func _Exec_SendExec_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ExecRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ExecServer).SendExec(m, &execSendExecServer{stream})
}

type Exec_SendExecServer interface {
	Send(*ExecReply) error
	grpc.ServerStream
}

type execSendExecServer struct {
	grpc.ServerStream
}

func (x *execSendExecServer) Send(m *ExecReply) error {
	return x.ServerStream.SendMsg(m)
}

var _Exec_serviceDesc = grpc.ServiceDesc{
	ServiceName: "admin.Exec",
	HandlerType: (*ExecServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "SendExec",
			Handler:       _Exec_SendExec_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "api/services.proto",
}

func init() { proto.RegisterFile("api/services.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 206 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x12, 0x4a, 0x2c, 0xc8, 0xd4,
	0x2f, 0x4e, 0x2d, 0x2a, 0xcb, 0x4c, 0x4e, 0x2d, 0xd6, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0x62,
	0x4d, 0x4c, 0xc9, 0xcd, 0xcc, 0x93, 0x92, 0x49, 0xcf, 0xcf, 0x4f, 0xcf, 0x49, 0xd5, 0x07, 0xa9,
	0x48, 0xcc, 0xcb, 0xcb, 0x2f, 0x49, 0x2c, 0xc9, 0xcc, 0xcf, 0x83, 0x2a, 0x52, 0x72, 0xe4, 0xe2,
	0x76, 0xad, 0x48, 0x4d, 0x0e, 0x4a, 0x2d, 0x2c, 0x4d, 0x2d, 0x2e, 0x11, 0x92, 0xe0, 0x62, 0x4f,
	0xce, 0x4d, 0xf1, 0x4b, 0xcc, 0x4d, 0x95, 0x60, 0x54, 0x60, 0xd4, 0xe0, 0x0c, 0x82, 0x71, 0xa1,
	0x32, 0x8e, 0x45, 0xe9, 0xc5, 0x12, 0x4c, 0x0a, 0xcc, 0x50, 0x19, 0x10, 0x57, 0x49, 0x99, 0x8b,
	0x13, 0x62, 0x44, 0x41, 0x4e, 0xa5, 0x90, 0x18, 0x17, 0x5b, 0x7e, 0x69, 0x49, 0x41, 0x69, 0x09,
	0x58, 0x3f, 0x4f, 0x10, 0x94, 0x67, 0xe4, 0xcf, 0xc5, 0x02, 0x52, 0x24, 0xe4, 0xce, 0xc5, 0x11,
	0x9c, 0x9a, 0x97, 0x02, 0x66, 0x0b, 0xe9, 0x81, 0x5d, 0xa8, 0x87, 0xe4, 0x00, 0x29, 0x01, 0x14,
	0xb1, 0x82, 0x9c, 0x4a, 0x25, 0xe1, 0xa6, 0xcb, 0x4f, 0x26, 0x33, 0xf1, 0x2a, 0x71, 0xe8, 0x97,
	0x19, 0xea, 0xa7, 0x56, 0xa4, 0x26, 0x5b, 0x31, 0x6a, 0x19, 0x30, 0x26, 0xb1, 0x81, 0xdd, 0x6f,
	0x0c, 0x08, 0x00, 0x00, 0xff, 0xff, 0xbf, 0x10, 0x76, 0xd1, 0xfa, 0x00, 0x00, 0x00,
}
