// Code generated by protoc-gen-go. DO NOT EDIT.
// source: api/services.proto

/*
Package accessrpc is a generated protocol buffer package.

It is generated from these files:
	api/services.proto

It has these top-level messages:
	CommandRequest
	CommandReply
*/
package accessrpc

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "google.golang.org/genproto/googleapis/api/annotations"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// Request message
type CommandRequest struct {
	CmdName string   `protobuf:"bytes,1,opt,name=cmdName" json:"cmdName,omitempty"`
	CmdArgs []string `protobuf:"bytes,2,rep,name=cmdArgs" json:"cmdArgs,omitempty"`
}

func (m *CommandRequest) Reset()                    { *m = CommandRequest{} }
func (m *CommandRequest) String() string            { return proto.CompactTextString(m) }
func (*CommandRequest) ProtoMessage()               {}
func (*CommandRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *CommandRequest) GetCmdName() string {
	if m != nil {
		return m.CmdName
	}
	return ""
}

func (m *CommandRequest) GetCmdArgs() []string {
	if m != nil {
		return m.CmdArgs
	}
	return nil
}

// Response message
type CommandReply struct {
	Output []byte `protobuf:"bytes,1,opt,name=output,proto3" json:"output,omitempty"`
}

func (m *CommandReply) Reset()                    { *m = CommandReply{} }
func (m *CommandReply) String() string            { return proto.CompactTextString(m) }
func (*CommandReply) ProtoMessage()               {}
func (*CommandReply) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *CommandReply) GetOutput() []byte {
	if m != nil {
		return m.Output
	}
	return nil
}

func init() {
	proto.RegisterType((*CommandRequest)(nil), "accessrpc.CommandRequest")
	proto.RegisterType((*CommandReply)(nil), "accessrpc.CommandReply")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for RemoteCommand service

type RemoteCommandClient interface {
	// Send a single command to be executed
	SendCommand(ctx context.Context, in *CommandRequest, opts ...grpc.CallOption) (RemoteCommand_SendCommandClient, error)
	// Send a stream of commands to be executed
	RemoteShell(ctx context.Context, opts ...grpc.CallOption) (RemoteCommand_RemoteShellClient, error)
}

type remoteCommandClient struct {
	cc *grpc.ClientConn
}

func NewRemoteCommandClient(cc *grpc.ClientConn) RemoteCommandClient {
	return &remoteCommandClient{cc}
}

func (c *remoteCommandClient) SendCommand(ctx context.Context, in *CommandRequest, opts ...grpc.CallOption) (RemoteCommand_SendCommandClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_RemoteCommand_serviceDesc.Streams[0], c.cc, "/accessrpc.RemoteCommand/SendCommand", opts...)
	if err != nil {
		return nil, err
	}
	x := &remoteCommandSendCommandClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type RemoteCommand_SendCommandClient interface {
	Recv() (*CommandReply, error)
	grpc.ClientStream
}

type remoteCommandSendCommandClient struct {
	grpc.ClientStream
}

func (x *remoteCommandSendCommandClient) Recv() (*CommandReply, error) {
	m := new(CommandReply)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *remoteCommandClient) RemoteShell(ctx context.Context, opts ...grpc.CallOption) (RemoteCommand_RemoteShellClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_RemoteCommand_serviceDesc.Streams[1], c.cc, "/accessrpc.RemoteCommand/RemoteShell", opts...)
	if err != nil {
		return nil, err
	}
	x := &remoteCommandRemoteShellClient{stream}
	return x, nil
}

type RemoteCommand_RemoteShellClient interface {
	Send(*CommandRequest) error
	Recv() (*CommandReply, error)
	grpc.ClientStream
}

type remoteCommandRemoteShellClient struct {
	grpc.ClientStream
}

func (x *remoteCommandRemoteShellClient) Send(m *CommandRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *remoteCommandRemoteShellClient) Recv() (*CommandReply, error) {
	m := new(CommandReply)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Server API for RemoteCommand service

type RemoteCommandServer interface {
	// Send a single command to be executed
	SendCommand(*CommandRequest, RemoteCommand_SendCommandServer) error
	// Send a stream of commands to be executed
	RemoteShell(RemoteCommand_RemoteShellServer) error
}

func RegisterRemoteCommandServer(s *grpc.Server, srv RemoteCommandServer) {
	s.RegisterService(&_RemoteCommand_serviceDesc, srv)
}

func _RemoteCommand_SendCommand_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(CommandRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(RemoteCommandServer).SendCommand(m, &remoteCommandSendCommandServer{stream})
}

type RemoteCommand_SendCommandServer interface {
	Send(*CommandReply) error
	grpc.ServerStream
}

type remoteCommandSendCommandServer struct {
	grpc.ServerStream
}

func (x *remoteCommandSendCommandServer) Send(m *CommandReply) error {
	return x.ServerStream.SendMsg(m)
}

func _RemoteCommand_RemoteShell_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(RemoteCommandServer).RemoteShell(&remoteCommandRemoteShellServer{stream})
}

type RemoteCommand_RemoteShellServer interface {
	Send(*CommandReply) error
	Recv() (*CommandRequest, error)
	grpc.ServerStream
}

type remoteCommandRemoteShellServer struct {
	grpc.ServerStream
}

func (x *remoteCommandRemoteShellServer) Send(m *CommandReply) error {
	return x.ServerStream.SendMsg(m)
}

func (x *remoteCommandRemoteShellServer) Recv() (*CommandRequest, error) {
	m := new(CommandRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _RemoteCommand_serviceDesc = grpc.ServiceDesc{
	ServiceName: "accessrpc.RemoteCommand",
	HandlerType: (*RemoteCommandServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "SendCommand",
			Handler:       _RemoteCommand_SendCommand_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "RemoteShell",
			Handler:       _RemoteCommand_RemoteShell_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "api/services.proto",
}

func init() { proto.RegisterFile("api/services.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 238 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x12, 0x4a, 0x2c, 0xc8, 0xd4,
	0x2f, 0x4e, 0x2d, 0x2a, 0xcb, 0x4c, 0x4e, 0x2d, 0xd6, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0xe2,
	0x4c, 0x4c, 0x4e, 0x4e, 0x2d, 0x2e, 0x2e, 0x2a, 0x48, 0x96, 0x92, 0x49, 0xcf, 0xcf, 0x4f, 0xcf,
	0x49, 0xd5, 0x07, 0xa9, 0x4a, 0xcc, 0xcb, 0xcb, 0x2f, 0x49, 0x2c, 0xc9, 0xcc, 0xcf, 0x83, 0x2a,
	0x54, 0x72, 0xe1, 0xe2, 0x73, 0xce, 0xcf, 0xcd, 0x4d, 0xcc, 0x4b, 0x09, 0x4a, 0x2d, 0x2c, 0x4d,
	0x2d, 0x2e, 0x11, 0x92, 0xe0, 0x62, 0x4f, 0xce, 0x4d, 0xf1, 0x4b, 0xcc, 0x4d, 0x95, 0x60, 0x54,
	0x60, 0xd4, 0xe0, 0x0c, 0x82, 0x71, 0xa1, 0x32, 0x8e, 0x45, 0xe9, 0xc5, 0x12, 0x4c, 0x0a, 0xcc,
	0x50, 0x19, 0x10, 0x57, 0x49, 0x8d, 0x8b, 0x07, 0x6e, 0x4a, 0x41, 0x4e, 0xa5, 0x90, 0x18, 0x17,
	0x5b, 0x7e, 0x69, 0x49, 0x41, 0x69, 0x09, 0xd8, 0x08, 0x9e, 0x20, 0x28, 0xcf, 0x68, 0x2b, 0x23,
	0x17, 0x6f, 0x50, 0x6a, 0x6e, 0x7e, 0x49, 0x2a, 0x54, 0xb9, 0x50, 0x34, 0x17, 0x77, 0x70, 0x6a,
	0x5e, 0x0a, 0x8c, 0x2b, 0xa9, 0x07, 0x77, 0xb8, 0x1e, 0xaa, 0xbb, 0xa4, 0xc4, 0xb1, 0x49, 0x15,
	0xe4, 0x54, 0x2a, 0x89, 0x35, 0x5d, 0x7e, 0x32, 0x99, 0x49, 0x40, 0x89, 0x5b, 0xbf, 0xcc, 0x50,
	0x3f, 0x19, 0x22, 0x63, 0xc5, 0xa8, 0x65, 0xc0, 0x28, 0xe4, 0xce, 0xc5, 0x0d, 0xb1, 0x2d, 0x38,
	0x23, 0x35, 0x27, 0x87, 0x2c, 0xc3, 0x19, 0x34, 0x18, 0x0d, 0x18, 0x93, 0xd8, 0xc0, 0x81, 0x65,
	0x0c, 0x08, 0x00, 0x00, 0xff, 0xff, 0x10, 0x2d, 0xb3, 0x72, 0x6b, 0x01, 0x00, 0x00,
}
